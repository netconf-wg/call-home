<?xml version='1.0'?>
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [
<!ENTITY rfc2119 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml">
<!ENTITY rfc4251 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4251.xml">
<!ENTITY rfc4252 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4252.xml">
<!ENTITY rfc4253 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.4253.xml">
<!ENTITY rfc5246 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml">
<!ENTITY rfc5539 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.5539.xml">
<!ENTITY rfc6020 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6020.xml">
<!ENTITY rfc6187 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6187.xml">
<!ENTITY rfc6241 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6241.xml">
<!ENTITY rfc6242 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6242.xml">
<!ENTITY rfc6335 SYSTEM "http://xml.resource.org/public/rfc/bibxml/reference.RFC.6335.xml">
]>

<?rfc toc="yes"?>
<?rfc symrefs="yes"?>
<?rfc sortrefs="yes" ?>
<?rfc compact="yes"?>
<?rfc subcompact="no"?>
<?rfc linkmailto="no" ?>
<?rfc editing="no" ?>
<?rfc comments="yes" ?>
<?rfc inline="yes"?>
<?rfc rfcedstyle="yes"?>
<?rfc-ext allow-markup-in-artwork="yes" ?>
<?rfc-ext include-index="no" ?>
<!--<?rfc strict="no"?> -->

<rfc category="std"
     ipr="trust200902"
     docName="draft-ietf-netconf-call-home-latest"
     updates="4253">
    <front>
        <title>NETCONF Call Home</title>
        <author initials="K.W." surname="Watsen" fullname="Kent Watsen">
            <organization>Juniper Networks</organization>
            <address>
                <email>kwatsen@juniper.net</email>
            </address>
        </author>
        <date/>
        <area>Operations</area>
        <workgroup>NETCONF Working Group</workgroup>
        <keyword>call-home</keyword>
        <abstract>
            <t>This document presents NETCONF Call Home, which enables a
            NETCONF server to initiate a secure connection to the NETCONF
            client.  NETCONF Call Home supports both the SSH and TLS 
            transports, and does so in a way that preserves the SSH and 
            TLS roles when compared to standard NETCONF over SSH or TLS 
            connections.</t>
        </abstract>
    </front>

    <middle>


        <section title="Introduction" anchor="introduction">
          <t>This document presents NETCONF Call Home, which enables a
          NETCONF server to initiate a secure connection to the NETCONF
          client.  NETCONF Call Home supports both the SSH and TLS 
          transports, and does so in a way that preserves the SSH and 
          TLS roles when compared to standard NETCONF over SSH or TLS 
          connections.</t>
          <t>The same technique is used to enabled call home for both
          the SSH and TLS transports.  The technique is to have the
          NETCONF server initiate a TCP connection to the intended NETCONF client.
          The NETCONF client then uses the established TCP connection to
          initiate either the SSH or TLS protocols.  In this way, the
          NETCONF server is always the SSH or TLS server, regardless
          if call home is used or not.</t>
          <t>Enabling the NETCONF server to maintain the role of SSH
          or TLS server is both necessary and desirable.  It is 
          necessary for the SSH protocol, as SSH channels and subsystems
          can only be opened on the SSH server.  It is desirable for
          both the SSH and TLS protocols as it conveniently leverages
          infrastructure that may be deployed for host-key or certificate
          verification and user authentication.</t>
 
          <section title="Motivation" anchor="motivation">
            <t>Call home is generally useful for both the initial deployment
            and on-going management of networking elements.  Here are some
            scenarios enabled by call home:
              <list style="symbols">
                <t>The network element may proactively call home after
                being powered on for the first time in order to register
                itself with its management system.</t>
                <t>The network element may access the network in a way that
                dynamically assigns it an IP address and it doesn't
                register its assigned IP addressed to a mapping service.</t>
                <t>The network element may be configured in "stealth mode"
                and thus doesn't have any open ports for the management
                system to connect to.</t>
                <t>The network element may be deployed behind a firewall
                that doesn't allow management access to the internal 
                network.</t>
                <t>The network element may be deployed behind a firewall
                that implements network address translation (NAT)
                for all internal network IP addresses, thus complicating
                the ability for a management system to connect to it.</t>
                <t>The operator may prefer to have network elements initiate
                management connections believing it is easier to secure one
                open-port in the data center than to have an open port on
                each network element in the network.</t>
              </list>
            </t>
            <t>Having call home for NETCONF is particularly useful as 
            NETCONF is the recommended protocol for configuration
            <xref target="iesg-statement"/>, which is needed for 
            provisioning workflows.</t>
          </section>

          <section title="Requirements Terminology">
            <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL",
            "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
            and "OPTIONAL" in this document are to be interpreted as
            described in RFC 2119 <xref target="RFC2119"/>.</t>
          </section>

          <section title="Applicability Statement">
            <t>The techniques described in this document are
            suitable for network management scenarios such
            as the ones described in <xref target="motivation"/>. However,
            these techniques SHOULD only be used for a NETCONF
            server to initiate a connection to a NETCONF
            client, as described in this document.</t>

            <t>The reason for this restriction is that different
            protocols have different security assumptions.
            The NETCONF transport specifications require
            NETCONF clients and servers to verify the identity
            of the other party before starting the NETCONF 
            protocol (section 2.2 of <xref target="RFC6241"/>.</t>

            <t>This contrasts with the base SSH and TLS protocols, which
            do not require programmatic verification of the 
            other party (e.g., section 9.3.4 of <xref target="RFC4251"/>
            and section 4 of <xref target="RFC4252"/>).  In such
            circumstances, allowing the SSH/TLS server to contact the
            SSH/TLS client would open new vulnerabilities. Any use of
            call home with SSH/TLS for purposes other than NETCONF
            will need a thorough, contextual security analysis.</t>
          </section>

          <section title="Update to RFC 4253">
            <t>This document updates the SSH Transport Layer Protocol
            <xref target="RFC4253"/> only by removing the "The client
            initiates the connection" statement made in Section 4 (Connection
            Setup).  This document assumes that the reference to 
            "connection" refers to the underlying transport connection
            (e.g., TCP).  Security implications related to this change
            are discussed in Security Considerations 
            (<xref target="sec-con"/>).</t>
          </section>
        </section>

        <section title="The NETCONF Server">
          <section title="Protocol Operation">
          <t>
            <list style="symbols">
              <t>The NETCONF server initiates a TCP connection to
              the NETCONF client on one of the IANA-assigned ports
              for NETCONF Call Home (YYYY for netconf-ch-ssh and 
              ZZZZ for netconf-ch-tls).</t>
              <t>The TCP connection is accepted and a TCP session is
              established.</t>
              <t>Using this TCP session, the NETCONF server immediately
              starts either the SSH-server or the TLS-server protocol, 
              depending on which port is connected.  The NETCONF 
              server MUST start the SSH-server protocol when port
              YYYY is connected and the TLS-server protocol when 
              port ZZZZ is connected.  The SSH-server and TLS-server
              protocols are described by <xref target="RFC4253"/> and 
              <xref target="RFC5246"/> respectively.</t>
              <t>The NETCONF protocol proceeds normally for SSH and TLS,
              as defined in <xref target="RFC6242"/> and
              <xref target="RFC5539"/> respectively.</t>
            </list>
          </t>
          </section>
          <section title="Configuration Data Model">
              <t>How to configure a NETCONF server to initiate a NETCONF 
              Call Home connection is outside the scope of this document,
              as implementations can support this protocol using proprietary
              configuration data models.   That said, a YANG
              <xref target="RFC6020"/> model for configuring NETCONF Call Home 
              is provided in <xref target="draft-ietf-netconf-server-model"/>.</t>
          </section>
        </section>

        <section title="The NETCONF Client">
          <section title="Protocol Operation">
          <t>
            <list style="symbols">
              <t>The NETCONF client listens for TCP connections
              on one or both of the IANA-assigned ports for NETCONF 
              Call Home (YYYY for netconf-ch-ssh and ZZZZ for netconf-ch-tls).</t>
              <t>The NETCONF client accepts an incoming TCP
              connection and a TCP session is established.</t>
              <t>Using this TCP session, the NETCONF client immediately
              starts either the SSH-client or the TLS-client protocol, 
              depending on which port is connected.  The NETCONF 
              client MUST start the SSH-client protocol when port
              YYYY is connected and the TLS-client protocol when 
              port ZZZZ is connected.  The SSH-client and TLS-client
              protocols are described by <xref target="RFC4253"/> and 
              <xref target="RFC5246"/> respectively.</t>
              <t>The NETCONF protocol proceeds normally for SSH and TLS,
              as is defined in <xref target="RFC6242"/> and
              <xref target="RFC5539"/> respectively.</t>
            </list>
          </t>
          </section>

          <section title="Server Identification and Verification" anchor="svr-id-and-ver">
  
            <t>Under normal circumstances, a NETCONF client initiates
            the NETCONF connection to the NETCONF server.  This action
            provides essential input to verify the NETCONF server's 
            identity.  For instance, when using TLS, the input can be
            compared to the domain names and IP addresses encoded in
            X.509 certificates.  Similarly, when using SSH, the input
            can be compared to information persisted previously.</t>
  
            <t>However, when receiving a NETCONF Call Home connection,
            the NETCONF client does not have any context
            leading it to know the connection is from a particular
            NETCONF server.   Thus the NETCONF client must derive the
             NETCONF server's identity using information provided by
            the network and the NETCONF server itself.  This section
            describes strategies a NETCONF client can use to identify
            a NETCONF server.</t>
  
            <t>In addition to identifying a NETCONF server, a NETCONF
            client must also be able to verify the NETCONF server's
            credentials.  Verifying a NETCONF server's credentials is
            necessary under normal circumstances but, due to call home
            being commonly used for newly deployed NETCONF servers, how to verify
            its credentials the very first time becomes a prominent concern.
            Therefore, this section also describes strategies a NETCONF
            client can use to verify a NETCONF server's credentials.</t>
  
            <t>The first information a NETCONF client learns from a
            NETCONF Call Home connection is the IP address of the NETCONF server,
            as provided by the source address of the TCP connection.
            This IP address could be used as an identifier directly, but
            doing so would only work in networks that use known static 
            addresses, in which case a standard NETCONF connection would
            have worked just as well.  Due to this limited use, it is not
            recommended to identify a NETCONF server based on its source
            IP address.</t>
  
            <t>The next information a NETCONF client learns is
            provided by the NETCONF server in the form of a host-key
            or a certificate, for the SSH and TLS protocols respectively.
            Without examining the contents of the host-key or certificate,
            it is possible to form an identity for the NETCONF server 
            using it (e.g., a fingerprint), since each NETCONF server
            is assumed to have a statistically unique public key, even
            in virtualized environments.  This strategy also provides
            a mechanism to verify the NETCONF server, in that
            a secure connection can only be established with the NETCONF 
            server having the matching private key.  This strategy is 
            commonly implemented by SSH clients, and could be used equally 
            well by TLS-based clients, such as may be required when the 
            NETCONF servers have self-signed certificates.  This strategy
            is viable and useful when the NETCONF servers call home using
            either SSH with standard RSA/DSA host-keys, or using TLS with
            self-signed certificates.</t> 
  
            <t>Yet another option for identifying a NETCONF server
            is for its host key or certificate to encode its identity
            directly (e.g., within the "Subject" field).  However, in
            order to trust the content encoded within a host-key or 
            certificate, it must be signed by a certificate authority
            trusted by the NETCONF client.  This strategy's use of PKI
            enables a NETCONF client to transparently authenticate 
            NETCONF servers, thus eliminating the need for manual 
            authentication, as required by the previously discussed 
            strategies.  Elimination of manual steps is needed to achieve
            scalable solutions, however one can claim that this merely
            pushes equivalent work to provisioning the NETCONF servers
            with signed credentials.  This assessment is accurate in 
            general, but not in the case where the manufacturer itself 
            provisions the credentials, such as is described by 
            <xref target="Std-802.1AR-2009"/>.  When NETCONF servers
            are pre-provisioned this way, NETCONF clients can
            transparently authenticate NETCONF servers using just the 
            manufacturer's trust anchor and a list of expected NETCONF 
            server identifiers, which could be provided along with 
            shipping information.  This strategy is recommended for
            all deployment scenarios.</t>
  	  
  	    <t>In discussing the use of certificates, it is worth noting
            that TLS uses X.509 certificates by default.  However, to use
            X.509 certificates with SSH, both the NETCONF client and server
            must support <xref target="RFC6187"/>.</t>
          </section>
        </section>

        <section anchor="sec-con" title="Security Considerations">
            <t>The security considerations described throughout 
            <xref target="RFC6242"/> and <xref target="RFC5539"/>,
            and by extension <xref target="RFC4253"/> and 
            <xref target="RFC5246"/>, apply here as well.</t>

            <t>This RFC deviates from standard SSH and TLS usage by
            having the SSH/TLS server initiate the underlying TCP 
            connection.  For SSH, <xref target="RFC4253"/> says 
            "the client initiates the connection", whereas for TLS,
            <xref target="RFC5246"/> says it is layered on top of
            "some reliable transport protocol" without further 
            attribution.</t>
            
            <t>For SSH, not having the SSH client initiate the TCP
            connection means that it does not have a preconceived
            notion of the SSH server's identity, and therefore must
            dynamically derive one from information provided by the
            network or the SSH server itself.  Security Considerations
            for strategies for this are described in 
            <xref target="svr-id-and-ver"/>.</t>

            <t>An attacker could DoS the NETCONF client by 
            having it perform computationally expensive operations, before
            deducing that the attacker doesn't posses a valid key.
            This is no different than any secured service and all common 
            precautions apply (e.g., blacklisting the source address
            after a set number of unsuccessful login attempts).</t>
        </section>

        <section title="IANA Considerations">
          <t>This document requests that IANA assigns two TCP port numbers
          in the "Registered Port Numbers" range with the service names
          "netconf-ch-ssh" and "netconf-ch-tls".  These ports will be the
          default ports for NETCONF Call Home protocol when using SSH and
          TLS respectively.  Below is the registration template following
          the rules in <xref target="RFC6335"/>.</t>

          <t>
            <figure align="center">
                <artwork><![CDATA[
Service Name:           netconf-ch-ssh
Transport Protocol(s):  TCP
Assignee:               IESG <iesg@ietf.org>
Contact:                IETF Chair <chair@ietf.org>
Description:            NETCONF Call Home (SSH)
Reference:              RFC XXXX
Port Number:            YYYY

Service Name:           netconf-ch-tls
Transport Protocol(s):  TCP
Assignee:               IESG <iesg@ietf.org>
Contact:                IETF Chair <chair@ietf.org>
Description:            NETCONF Call Home (TLS)
Reference:              RFC XXXX
Port Number:            ZZZZ
]]></artwork>
            </figure>
          </t>
        </section>

        <section title="Acknowledgements">
            <t>The author would like to thank for following for
            lively discussions on list and in the halls (ordered
            by last name): Andy Bierman, Martin Bjorklund, Mehmet Ersue,
            Wes Hardaker, Stephen Hanna, David Harrington, Jeffrey Hutzelman,
            Radek Krejci, Alan Luchuk, Mouse, Russ Mundy, Tom Petch, 
            Peter Saint-Andre, Joe Touch, Sean Turner, Bert Wijnen.</t>
        </section>

    </middle>
    <back>

        <references title="Normative References">
          &rfc2119;
          &rfc4251;
          &rfc4252;
          &rfc4253;
          &rfc5246;
          &rfc5539;
          &rfc6020;
          &rfc6187;
          &rfc6241;
          &rfc6242;
          &rfc6335;
        </references>
        <references title="Informative References">
          <reference anchor="Std-802.1AR-2009" target="http://standards.ieee.org/findstds/standard/802.1AR-2009.html">
              <front>
                  <title>IEEE Standard for Local and metropolitan area networks - Secure Device Identity</title>
                  <author fullname="WG802.1 - Higher Layer LAN Protocols Working Group">
                      <organization>IEEE SA-Standards Board</organization>
                  </author>
                  <date month="December" year="2009"/>
              </front>
          </reference>
          <reference anchor="iesg-statement" target="https://www.ietf.org/iesg/statement/writable-mib-module.html">
            <front>
              <title>Writable MIB Module IESG Statement</title>
              <author initials="IESG" fullname="Internet Engineering Steering Group"/>
              <date month="March" day="2" year="2014"/>
            </front>
          </reference>
          <reference anchor="draft-ietf-netconf-server-model" target="http://tools.ietf.org/html/draft-ietf-netconf-server-model">
              <front>
                  <title>NETCONF Server Configuration Model</title>
                  <author initials="K.W." surname="Watsen"
                          fullname="Kent Watsen">
                      <organization>Juniper Networks</organization>
                  </author>
                  <author initials="J.S." surname="Schoenwaelder"
                          fullname="Juergen Schoenwaelder">
                      <organization>Jacobs University</organization>
                  </author>
                  <date year="2014" />
              </front>
          </reference>
      </references>

      <section title="Change Log">
        <section title="00 to 01">
          <t>
            <list style="symbols">
              <t>The term "TCP connection" is now used throughout.</t>
              <t>The terms "network element" and "management system" are now only used in the Motivation section.</t>
              <t>Restructured doc a little to create an Introduction section.</t>
              <t>Fixed reference in Applicability Statement so it would work
              equally well for SSH and TLS.</t>
              <t>Fixed reported odd wording and three references.</t>
            </list>
          </t>
        </section>
      </section>

    </back>

</rfc>

